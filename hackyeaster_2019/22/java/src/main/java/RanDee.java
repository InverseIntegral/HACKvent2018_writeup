import java.math.BigInteger;

public class RanDee {

    public static void main(String[] args) {
        BigInteger n0 = new BigInteger("43197226819995414250880489055413585390503681019180594772781599842207471693041753129885439403306011423063922105541557658194092177558145184151460920732675652134876335722840331008185551706229533179802997366680787866083523");
        BigInteger n1 = new BigInteger("10603199174122839808738169357706062732533966731323858892743816728206914395320609331466257631096646511986506501272036007668358071304364156150345138983648630874220488837685118753574424686204595981514561343227316297317899");
        BigInteger c0 = new BigInteger("28181072004973949938546689607280132733514376641605169495754912428335704118088087978918344741937618706192728369992365104786854427689675673204353839263196581517462813454954645956569721549887573594597053350585038195786183");

        BigInteger p1 = n0.gcd(n1);
        BigInteger q0 = n0.divide(p1);

        decrypt(q0, p1, n0, c0);
    }

    private static void decrypt(BigInteger p, BigInteger q, BigInteger n, BigInteger c) {
        BigInteger z = p.subtract(new BigInteger("1"))
                .multiply(q.subtract(new BigInteger("1")));

        BigInteger e = new BigInteger("2").pow(16).add(new BigInteger("1"));
        BigInteger d = e.modInverse(z);

        System.out.println(new String(c.modPow(d, n).toByteArray()));
    }

}
